apiVersion: batch/v1
kind: Job
metadata:
  name: {{  .Values.mc.name  }}
spec:
  template:
    metadata:
      name: {{  .Values.mc.name  }}
    spec:
      initContainers:
        - name: init-wait-for-minio
          image: alpine
          command: ["/bin/sh", "-c", "for i in $(seq 1 300); do nc -zvw1 {{  .Values.minio.name }} {{ .Values.minio.container.ports.s3  }} && exit 0 || sleep 3; done; exit 1"]
      containers:
        - name: {{  .Values.mc.container.name  }}
          image: {{  .Values.mc.container.image  }}
          resources:
            requests:
              cpu:  {{  .Values.mc.container.resources.requests.cpu  }}
              memory:  {{  .Values.mc.container.resources.requests.memory  }}
            limits:
              cpu:  {{  .Values.mc.container.resources.limits.cpu  }}
              memory:  {{  .Values.mc.container.resources.limits.memory  }}
          imagePullPolicy: "IfNotPresent"
          command: ["/bin/sh","-c"]
          args: ["sleep 5; /usr/bin/mc config host add myminio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY; /usr/bin/mc mb  myminio/alfalfa; /usr/bin/mc policy set public myminio/alfalfa" ]
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name  }}
                  key:  AWS_ACCESS_KEY_ID
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name  }}
                  key:  AWS_SECRET_ACCESS_KEY
      restartPolicy: Never
  backoffLimit: 5

